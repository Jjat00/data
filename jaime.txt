Nombre: Jaime Aza
Edad: 28 años
Años de experiencia: 4 años
Información: ingeniero desarrollador de software full stack con experiencia en React, Node y Python. 
LinkedIn: https://www.linkedin.com/in/jaimeaza/
GitHub: https://github.com/Jjat00
Sobre mí: Desarrollador de software con 3 años de experiencia en React.js y Node.js. Poseo una sólida comprensión de los conceptos
de desarrollo web y de cómo integrar los diferentes componentes de una aplicación. He demostrado habilidades en el
desarrollo de aplicaciones tanto en el lado del servidor como en el cliente, enfocándome en proporcionar soluciones
eficientes y escalables. Estoy comprometido a brindar soluciones innovadoras y a mantenerme actualizado con las últimas
tendencias en desarrollo web. Me gusta trabajar en equipo y colaborar con otros desarrolladores para asegurar la entrega
de soluciones de alta calidad y eficientes. Me gustaría continuar mi carrera en una empresa innovadora y en constante
crecimiento donde pueda seguir creciendo profesionalmente y contribuir al éxito de la empresa.
EXPERIENCIA: 
higher bit solutions
Full Stack Developer Engineer - marzo 2025 - presente
Decimetrix
Full Stack Developer Engineer — enero de 2022 - hasta febrero de 2025
● Diseñé la arquitectura de datos de un digital twin y el esquema de migraciones de base de datos del producto
haciendo uso de Sequelize y PostreSQL, esto facilitó la escalabilidad del producto.
● Realicé la refactorización del código hecho en react para que sea más legible y escalable, alcanzando la optimización
del mismo en un 50%.
● Desarrollé nuevos módulos para la gestión de usuarios y visualización de objetos en mapas usando react, mapbox
y node. Esto permitió optimizar la recolección de datos en campo en un 40%.
Stack tecnológico: React.js · Node.js · Mapbox · Python · Liderazgo · PostgreSQL · MongoDB · Sequelize.js · Docker.
Software Development Engineer — 05, 2021 - 12, 2021
● Empecé la creación de la aplicación Green Dragon, escogiendo las tecnologías y realizando el modelo de la base de
datos, esto dió punto de partida a la implementación del producto.
● Desarrollé el MVP de la aplicación web Green Dragon, un digital twin que ayuda a la gestión de la huella de carbono.
Con esto se optimizó las actividades diarias realizadas en instancias petroleras
Stack tecnológico: React.js · Node.js · Mapbox · PostgreSQL · Docker · AWS · EC2 · S3 · Lambda.
Intecol — 01, 2021 - 04, 2021
● Logré manipular una cámara térmica FLIR con el lenguaje Python, esto permitió realizar pruebas en laboratorio con
librerías open source como OpenCV reduciendo costos asociados a las librerías de pago.
● Realicé una aplicación de escritorio usando Python y PyQt para facilitar la adquisición y procesamiento de imágenes de cámaras de visión artificial industriales de Cognex y FLIR agilizando el tiempo de la adquisición en un 30%. Stack tecnológico: Python · OpenCV · PyQt · Visión por computador · NumPy
EDUCACIÓN
Universidad del Valle – Cali, Colombia. Ingeniería electrónica, facultad de ingeniería, 2015 - 2020.
Universidad del Valle – Cali, Colombia. Ingeniería de sistemas y computación, facultad de ingeniería, 2019 - 2021.
Proyectos:

[
  {
    "img": "https://i.ibb.co/DY6ppRq/camera-positions.jpg",
    "title": "Optimización de ubicación de cámaras de seguridad",
    "description": "Determina estratégicamente las ubicaciones de cámaras de seguridad para cubrir todos los puntos de interés en un área geográfica específica.",
    "technologies": "React.js, Mapbox.js, CSS, Python, Flask, Sklearn.",
    "code": "/",
    "website": "https://camera-location-optimization.pages.dev/"
  },
  {
    "img": "https://i.ibb.co/WnB6ZVw/greendragon.jpg",
    "title": "Green dragon",
    "description": "Lideré el equipo para el desarrollo de la aplicación Green Dragon de la empresa Decimetrix, que recolecta información de inventario e inspecciones de campo, detecta y cuantifica emisiones de gas, y establece líneas base para la evaluación de la prevención y control de fugas.",
    "technologies": "React, Node, Python, Flask, Express, S3, EC2, PostgreSQL, MongoDB, Flask, Redux, SWR, Docker, Mapbox.js.",
    "code": "/",
    "website": "/"
  },
  {
    "img": "https://i.ibb.co/Y7F31kS/lofi-landing.jpg",
    "title": "Lofi code",
    "description": "Un sitio web sencillo, sin usar librerías. Por medio del API de youtube se muestra un listado de recomendaciones de Lofi Code.",
    "technologies": "HTML5, Javascript, CSS, Youtube API.",
    "code": "https://github.com/Jjat00/lofi-code-landing",
    "website": "https://jjat00.github.io/lofi-code-landing"
  },
  {
    "img": "https://i.ibb.co/3vMrLsj/batatabit.jpg",
    "title": "Batatabit",
    "description": "Web page realizada usando mobile first, se hizo la maquetación de la página a partir del diseño en figma. Para el estilo se usó la metodología de nomenclatura BEM.",
    "technologies": "HTML5, CSS.",
    "code": "https://github.com/Jjat00/batatabit",
    "website": "https://jjat00.github.io/batatabit/"
  },
  {
    "img": "https://i.ibb.co/9wyYdYg/captura-deptherm.png",
    "title": "Deptherm inspection",
    "description": "Permite hacer inspección termográfica en 3D. También permite hacer calibración de cámaras, fusión de imágenes RGB-térmica, RGB-profundidad, térmica-profundidad, RGB-térmica-profundidad.",
    "technologies": "Python, Vedo, Numpy, OpenCV, Kinect camera, PyQT, PostresSQL, Qt Designer.",
    "code": "https://github.com/Jjat00/Deptherm-Inspection",
    "website": "https://github.com/Jjat00/Deptherm-Inspection"
  },
  {
    "img": "https://i.ibb.co/W5Q38Qb/nural-network-05.jpg",
    "title": "Clasificador usando redes convolucionales",
    "description": "CNN que clasifica 5 tipos de sanitarios (A, B, C, D y E) para facilitar el etiquetado durante la producción de los sanitarios.",
    "technologies": "Python, Numpy, OpenCV, Keras, Tensorflow, Sklearn.",
    "code": "https://github.com/Jjat00/Clasificador-Sanitarios-CNN-Keras",
    "website": "https://github.com/Jjat00/Clasificador-Sanitarios-CNN-Keras/blob/master/SanitaryClassification.ipynb"
  },
  {
    "img": "https://i.ibb.co/X7gw0rD/pcrf.png",
    "title": "Reconstrucción 3D con perfilación láser",
    "description": "La perfilación láser es una técnica de visión artificial para hacer reconstrucción 3D. Este proyecto muestra cómo generar una nube de puntos 3D a partir de un conjunto de imágenes de perfilación laser.",
    "technologies": "Python, Vedo, Numpy, OpenCV.",
    "code": "https://github.com/Jjat00/Nube-puntos-desde-imagenes-perfilacion-laser",
    "website": "https://github.com/Jjat00/Nube-puntos-desde-imagenes-perfilacion-laser"
  }
]
